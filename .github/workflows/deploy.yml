name: Deploy to Cloud

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: SSH - Clean up existing docker containers & volumes
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          debug: true
          command_timeout: 120s
          script: |
            cd ~/my-iot-app/backend
            timeout --kill-after=10s 30s docker compose -f docker-compose.yaml down --timeout 20
            if [ $? -eq 124 ]; then
              echo "Timeout reached, killing containers..."
              docker kill $(docker ps -q) || true
              docker rm -f $(docker ps -aq) || true
              sudo systemctl restart docker
              sleep 10
            fi
            sleep 10
            # Optional: prune unused networks to avoid stale network issues
            docker network prune -f || true

      - name: Copy project files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          source: "."
          target: "my-iot-app/"
          rm: true

      - name: SSH and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          debug: true
          script: |
            cd ~/my-iot-app/backend
            
            # Create .env file with secrets
            echo "ASPNETCORE_URLS=http://+:80" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "MQTT_BROKER=${{ secrets.MQTT_BROKER }}" >> .env
            echo "Cloudinary__CloudName=${{ secrets.CLOUDINARY_CLOUDNAME }}" >> .env
            echo "Cloudinary__ApiKey=${{ secrets.CLOUDINARY_APIKEY }}" >> .env
            echo "Cloudinary__ApiSecret=${{ secrets.CLOUDINARY_APISECRET }}" >> .env
            echo "TLS_CERT_B64=${{ secrets.TLS_CERT_B64 }}" >> .env
            echo "TLS_KEY_B64=${{ secrets.TLS_KEY_B64 }}" >> .env
            echo "ConnectionStrings__PgDbConnection=Host=db;Username=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }}" >> .env

            chmod +x nginx/scripts/entrypoint.sh

            # Build and start containers
            docker compose -f docker-compose.yaml build --no-cache
            docker compose -f docker-compose.yaml up --build -d

            # Debug info - list containers, networks and inspect compose network
            echo "==== Docker containers ===="
            docker ps -a

            echo "==== Docker networks ===="
            docker network ls

            echo "==== Inspect backend_default network ===="
            docker network inspect backend_default || echo "Network backend_default not found"

            echo "==== Docker Compose status ===="
            docker compose -f docker-compose.yaml ps

            # Check environment variables inside app container
            APP_CONTAINER=$(docker ps --filter "name=backend-app-1" --format "{{.ID}}")
            if [ -n "$APP_CONTAINER" ]; then
              echo "==== Environment variables inside app container ===="
              docker exec "$APP_CONTAINER" env | grep -E 'POSTGRES|MQTT|CLOUDINARY'
              echo "==== Logs from app container ===="
              docker compose -f docker-compose.yaml logs app
            else
              echo "App container not found"
            fi
