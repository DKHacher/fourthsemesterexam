name: Deploy to Cloud

on:
  push:
    branches:
      - main 

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3


      - name: SSH - Clean up existing docker containers & volumes
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          debug: true
          command_timeout: 120s  
          script: |
            cd ~/my-iot-app/backend
            # stops all containers
            docker compose -f docker-compose.yaml down --timeout 20 || true
            
            sleep 10
            # remove all containers currently not used as it would slow down the process but is left in in case of issues
            # docker compose -f docker-compose.yaml rm -f || true
            
            # Optional: prune unused volumes (be careful in production) currently not used
            # docker volume prune -f || true
            
            # Optional: prune unused images and networks
            # docker system prune -f || true


      - name: Copy project files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          source: "."
          target: "my-iot-app/"
          rm: true


      - name: SSH and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.CLOUD_SERVER_IP }}
          username: ${{ secrets.CLOUD_USER }}
          key: ${{ secrets.CLOUD_SSH_KEY }}
          script: |
            cd ~/my-iot-app/backend
            
            cat > .env <<EOF
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            MQTT_BROKER=${{ secrets.MQTT_BROKER }}
            CLOUDINARY_CLOUDNAME=${{ secrets.CLOUDINARY_CLOUDNAME }}
            CLOUDINARY_APIKEY=${{ secrets.CLOUDINARY_APIKEY }}
            CLOUDINARY_APISECRET=${{ secrets.CLOUDINARY_APISECRET }}
            EOF

            export POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            export POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
            export MQTT_BROKER="${{ secrets.MQTT_BROKER }}"
            export CLOUDINARY_CLOUDNAME="${{ secrets.CLOUDINARY_CLOUDNAME }}"
            export CLOUDINARY_APIKEY="${{ secrets.CLOUDINARY_APIKEY }}"
            export CLOUDINARY_APISECRET="${{ secrets.CLOUDINARY_APISECRET }}"

            docker compose -f docker-compose.yaml build --no-cache
            docker compose -f docker-compose.yaml up --build -d
      